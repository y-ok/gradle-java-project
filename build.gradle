/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.6.2/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building a CLI application
    id 'application'

    // Code coverage
    id 'jacoco'

    // SpotBugs
    id 'com.github.spotbugs' version '2.0.0'

    // Google Formatter
    id 'com.github.sherter.google-java-format' version '0.8'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

// Set pre-commit to .git/hooks
apply from: rootProject.file('gradle/install-git-hooks.gradle')

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:28.0-jre'

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.10'
    annotationProcessor 'org.projectlombok:lombok:1.18.10'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}

application {
    // Define the main class for the application
    mainClassName = 'gradle.java.project.Main'
}

jacoco {
    toolVersion = "0.8.4"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

spotbugs {
  toolVersion = '3.1.12'
}

// Switch by environment config settings
apply from: rootProject.file("gradle/environment/${env}/env.gradle")

// To generate an HTML report instead of XML
tasks.withType(com.github.spotbugs.SpotBugsTask) {
  reports.xml.enabled = false
  reports.html.enabled = true
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

// task to make src/main/resources and test/resources
task initDirs {
   sourceSets*.resources.srcDirs*.each { it.mkdirs() }
}
