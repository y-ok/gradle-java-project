/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.6.2/userguide/tutorial_java_projects.html
 */

buildscript {
    ext {
        gradleSpotbugsVersion = '2.0.1'
        gradleSpotlessVersion = '3.25.0'
        gradleShadowVersion = '5.1.0'
        gradleTaskTreeVersion = '1.4'
    }
    repositories {
        maven {
            url './repositories'
        }
    }
    dependencies {
        classpath "com.github.spotbugs:spotbugs-gradle-plugin:${gradleSpotbugsVersion}"
        classpath "com.diffplug.spotless:spotless-plugin-gradle:${gradleSpotlessVersion}"
        classpath "com.github.jengelman.gradle.plugins:shadow:${gradleShadowVersion}"
        classpath "gradle.plugin.com.dorongold.plugins:task-tree:${gradleTaskTreeVersion}"
    }
}

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building a CLI application
    id 'application'

    // Code coverage
    id 'jacoco'
}

// SpotBugs
apply plugin: 'com.github.spotbugs'
// Google Formatter
apply plugin: 'com.diffplug.gradle.spotless'
// Shadow
apply plugin: 'com.github.johnrengelman.shadow'
// tasks tree
apply plugin: 'com.dorongold.task-tree'

sourceCompatibility = 1.8
targetCompatibility = 1.8

// Set pre-commit to .git/hooks
apply from: rootProject.file('gradle/install-git-hooks.gradle')

repositories {
    maven {
        url './repositories'
    }
}

ext {
    guavaVersion = '28.0-jre'
    slf4jVersion =  '1.7.28'
    logbackVersion = '1.2.3'
    junit5Version = '5.1.0'
    jacocoVersion = '0.8.4'
    spotbugsVersion =  '3.1.12'
}

configurations {
    testAnnotationProcessor.extendsFrom annotationProcessor
    testImplementation.extendsFrom compileOnly
}

dependencies {
    // This dependency is used by the application.
    implementation "com.google.guava:guava:${guavaVersion}"

    // slf4j
    implementation "org.slf4j:slf4j-api:${slf4jVersion}"
    implementation "org.slf4j:slf4j-simple:${slf4jVersion}"

    // logback
    compileOnly "ch.qos.logback:logback-classic:${logbackVersion}"
    compileOnly "ch.qos.logback:logback-core:${logbackVersion}"

    // Use JUnit test framework
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junit5Version}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junit5Version}"
}

application {
    // Define the main class for the application
    mainClassName = 'gradle.java.project.Main'
}

test {
    useJUnitPlatform()
}

jacoco {
    toolVersion = "${jacocoVersion}"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled true
        html.destination file("${buildDir}/jacocoHtml")
    }
}

spotless {
    java {
        eclipse().configFile "./styleguide/eclipse-java-google-style.xml"
    }
}

spotbugs {
    toolVersion = "${spotbugsVersion}"
}

// Switch by environment config settings
apply from: rootProject.file("gradle/environment/${env}/env.gradle")

// To generate an HTML report instead of XML
tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports.xml.enabled = false
    reports.html.enabled = true
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

// task to make src/main/resources and test/resources
task initDirs {
    sourceSets*.resources.srcDirs*.each { it.mkdirs() }
}

// Minimizing an shadow JAR
shadowJar {
    minimize()
}

task makeRelease(dependsOn: assemble) {
    def releaseDirs = ['lib', 'properties', 'logs', 'output']

    def topDir = new File("$buildDir/release/$project.name")
    topDir.mkdirs()

    releaseDirs.each {
        def dir = new File("$buildDir/release/$project.name/" + it)
        dir.mkdirs()
    }
    doLast {
        copy {
            from "$buildDir/libs"
            into "$buildDir/release/$project.name/lib"
            rename(/(.+)-all.jar/, '$1.jar')
        }
        copy {
            from "$buildDir/resources/main"
            into "$buildDir/release/$project.name/properties"
            include '*.properties'
        }
        def newFile = new File("$buildDir/release/$project.name/" + "${env}".toUpperCase())
        newFile.createNewFile()
        
        delete fileTree(dir: "$buildDir/distributions", include: ["*.zip", "*.tar"])
    }
}

task releaseZip(type: Zip, dependsOn: makeRelease) {
    classifier = "${env}"
    from "$buildDir/release/$project.name"
}